stages:
  - build
  - deploy

before_script:
  - CI_SAFE_PROJECT_PATH=`echo ${CI_PROJECT_PATH} | tr '[:upper:]' '[:lower:]'`

build:
  stage: build
  image: golang:1.10-alpine
  before_script:
    - apk add --update --no-cache git dep make musl-dev nodejs yarn
    - mkdir -p /go/src/github.com/dotStart
    - cp -r $CI_PROJECT_DIR /go/src/github.com/dotStart/$CI_PROJECT_NAME
    - cd /go/src/github.com/dotStart/$CI_PROJECT_NAME
  script:
    - make
  after_script:
    - cp -r build/ $CI_PROJECT_DIR/
    - cd $CI_PROJECT_DIR/
  artifacts:
    paths:
      - build/*

docker:
  stage: deploy
  image: docker:git
  services:
    - docker:dind
  script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - TAG_NAME=`git describe --exact-match --tags || true`
    - if [ -z "$TAG_NAME" ]; then TAG_NAME="ci-${CI_PIPELINE_IID}"; fi
    - if [ "${TAG_NAME:0:1}" == "v" ]; then TAG_NAME="${TAG_NAME:1}"; fi
    - cp build/linux-amd64/watchdog docker/watchdog
    - docker build -t "${CI_REGISTRY}/${CI_SAFE_PROJECT_PATH}:${TAG_NAME}" docker/
    - docker push "${CI_REGISTRY}/${CI_SAFE_PROJECT_PATH}:${TAG_NAME}"

docker_main:
  stage: deploy
  image: docker:git
  services:
    - docker:dind
  script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - cp build/linux-amd64/watchdog docker/watchdog
    - docker build -t "${CI_REGISTRY}/${CI_SAFE_PROJECT_PATH}" docker/
    - docker push "${CI_REGISTRY}/${CI_SAFE_PROJECT_PATH}"
  only:
    - master
